<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Discussion extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model(['Discussion_model','Notification_model']);
    } 

    /*
     * Listing of discussion
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('discussion/index?');
        $config['total_rows'] = $this->Discussion_model->get_all_discussion_count();
        $this->pagination->initialize($config);

        $data['discussion'] = $this->Discussion_model->get_all_discussion($params);
        
        $data['_view'] = 'discussion/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new discussion
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('instruction','Instruction','required|max_length[250]');
		$this->form_validation->set_rules('dueDate','DueDate','required');
		$this->form_validation->set_rules('facilitatorID','FacilitatorID','required');
		$this->form_validation->set_rules('marks','Marks','required');
		$this->form_validation->set_rules('discussion','Discussion','required');
		$this->form_validation->set_rules('discussion2','Discussion2','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'topicID' => $this->input->post('topicID'),
				'moduleID' => $this->input->post('moduleID'),
				'studentID' => $this->input->post('studentID'),
				'instruction' => $this->input->post('instruction'),
				'dueDate' => $this->input->post('dueDate'),
				'facilitatorID' => $this->input->post('facilitatorID'),
				'facilitatorID2' => $this->input->post('facilitatorID2'),
				'academicID' => $this->input->post('academicID'),
				'time_stamp' => $this->input->post('time_stamp'),
				'marks' => $this->input->post('marks'),
				'discussion' => $this->input->post('discussion'),
				'discussion2' => $this->input->post('discussion2'),
            );
            
            $discussion_id = $this->Discussion_model->add_discussion($params);
            redirect('discussion/index');
        }
        else
        {
			$this->load->model('Topic_model');
			$data['all_topics'] = $this->Topic_model->get_all_topics();

			$this->load->model('Module_model');
			$data['all_modules'] = $this->Module_model->get_all_modules();

			$this->load->model('Student_model');
			$data['all_students'] = $this->Student_model->get_all_students();
            
            $data['_view'] = 'discussion/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a discussion
     */
    function edit($discussionID)
    {   
        // check if the discussion exists before trying to edit it
        $data['discussion'] = $this->Discussion_model->get_discussion($discussionID);
        
        if(isset($data['discussion']['discussionID']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('instruction','Instruction','required|max_length[250]');
			$this->form_validation->set_rules('dueDate','DueDate','required');
			$this->form_validation->set_rules('facilitatorID','FacilitatorID','required');
			$this->form_validation->set_rules('marks','Marks','required');
			$this->form_validation->set_rules('discussion','Discussion','required');
			$this->form_validation->set_rules('discussion2','Discussion2','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'topicID' => $this->input->post('topicID'),
					'moduleID' => $this->input->post('moduleID'),
					'studentID' => $this->input->post('studentID'),
					'instruction' => $this->input->post('instruction'),
					'dueDate' => $this->input->post('dueDate'),
					'facilitatorID' => $this->input->post('facilitatorID'),
					'facilitatorID2' => $this->input->post('facilitatorID2'),
					'academicID' => $this->input->post('academicID'),
					'time_stamp' => $this->input->post('time_stamp'),
					'marks' => $this->input->post('marks'),
					'discussion' => $this->input->post('discussion'),
					'discussion2' => $this->input->post('discussion2'),
                );

                $this->Discussion_model->update_discussion($discussionID,$params);            
                redirect('discussion/index');
            }
            else
            {
				$this->load->model('Topic_model');
				$data['all_topics'] = $this->Topic_model->get_all_topics();

				$this->load->model('Module_model');
				$data['all_modules'] = $this->Module_model->get_all_modules();

				$this->load->model('Student_model');
				$data['all_students'] = $this->Student_model->get_all_students();

                $data['_view'] = 'discussion/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The discussion you are trying to edit does not exist.');
    } 

    /*
     * Deleting discussion
     */
    function remove($discussionID)
    {
        $discussion = $this->Discussion_model->get_discussion($discussionID);

        // check if the discussion exists before trying to delete it
        if(isset($discussion['discussionID']))
        {
            $this->Discussion_model->delete_discussion($discussionID);
            redirect('discussion/index');
        }
        else
            show_error('The discussion you are trying to delete does not exist.');
    }
}
