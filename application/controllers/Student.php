<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Student extends CI_Controller{
    public function __construct()
    {
        parent::__construct();
        $this->load->model(['Student_model','Course_model','Learning_model','Notification_model']);
    } 

    /*
     * Listing of students
     */
    public function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('student/index?');
        $config['total_rows'] = $this->Student_model->get_all_students_count();
        $this->pagination->initialize($config);

        $data['students'] = $this->Student_model->get_all_students();
        
		$this->load->view('header_footer/header_admin');
        $this->load->view('student/index',$data);
		$this->load->view('header_footer/footer_admin');
    }

	public function my_courses(){

		if($this->session->status and $this->session->type_user == 2){

			$data['courses'] = $this->Course_model->get_courses_student($this->session->id_user);
			$this->load->view('header_footer/header_admin');
			$this->load->view('student/my_cours',$data);
			$this->load->view('header_footer/footer_admin');
		}
		else{
			redirect($_SERVER['HTTP_REFERER']);
		}
	}

    /*
     * Adding a new student
     */
    public function add()
    {   
        $this->load->library('form_validation');
		$this->form_validation->set_rules('studentName','StudentName','required');
		$this->form_validation->set_rules('studentLastName','StudentLastName','required');
		$this->form_validation->set_rules('studentDOB','StudentDOB','required');
		$this->form_validation->set_rules('studentCountry','StudentCountry','required');
		$this->form_validation->set_rules('studentNumber','StudentNumber','required');
		$this->form_validation->set_rules('number','Number','required');
		$this->form_validation->set_rules('identityNo','IdentityNo','required');
		$this->form_validation->set_rules('gender','Gender','required');
		$this->form_validation->set_rules('studentEmail','StudentEmail','required');
		$this->form_validation->set_rules('studentPassword','StudentPassword','required');
		$this->form_validation->set_rules('studentPhone','StudentPhone','required');
		$this->form_validation->set_rules('studentHomeNo','StudentHomeNo','required');
		$this->form_validation->set_rules('studentImage','StudentImage');
		$this->form_validation->set_rules('studentAddress','StudentAddress','required');
		$this->form_validation->set_rules('passport','Passport','required');
		$this->form_validation->set_rules('disability','Disability','required');
		$this->form_validation->set_rules('hearing','Hearing','required');
		$this->form_validation->set_rules('physicalHealth','PhysicalHealth','required');
		$this->form_validation->set_rules('intellectual','Intellectual','required');
		$this->form_validation->set_rules('learning','Learning','required');
		$this->form_validation->set_rules('mental','Mental','required');
		$this->form_validation->set_rules('vision','Vision','required');
		$this->form_validation->set_rules('medical','Medical','required');
		$this->form_validation->set_rules('other','Other','required');
		$this->form_validation->set_rules('passportDOC','PassportDOC','required');
		$this->form_validation->set_rules('proofOfPayment','ProofOfPayment','required');
		
		$this->form_validation->set_rules('studentMiddleName','StudentMiddleName','required');
		$this->form_validation->set_rules('aggrement','Aggrement','required');
		
		if($this->form_validation->run())
        {   
            $params = array(
				'studentName' => $this->input->post('studentName'),
				'studentLastName' => $this->input->post('studentLastName'),
				'studentDOB' => $this->input->post('studentDOB'),
				'studentCountry' => $this->input->post('studentCountry'),
				'studentNumber' => $this->input->post('studentNumber'),
				'number' => $this->input->post('number'),
				'identityNo' => $this->input->post('identityNo'),
				'gender' => $this->input->post('gender'),
				'studentEmail' => $this->input->post('studentEmail'),
				'studentPassword' => $this->input->post('studentPassword'),
				'studentPhone' => $this->input->post('studentPhone'),
				'studentHomeNo' => $this->input->post('studentHomeNo'),
				'studentImage' => $this->input->post('studentImage'),
				'studentAddress' => $this->input->post('studentAddress'),
				'passport' => $this->input->post('passport'),
				'disability' => $this->input->post('disability'),
				'hearing' => $this->input->post('hearing'),
				'physicalHealth' => $this->input->post('physicalHealth'),
				'intellectual' => $this->input->post('intellectual'),
				'learning' => $this->input->post('learning'),
				'mental' => $this->input->post('mental'),
				'vision' => $this->input->post('vision'),
				'medical' => $this->input->post('medical'),
				'other' => $this->input->post('other'),
				'passportDOC' => $this->input->post('passportDOC'),
				'proofOfPayment' => $this->input->post('proofOfPayment'),
				'certificates' => $this->input->post('certificates'),
				'otp' => $this->input->post('otp'),
				'activeStatus' => $this->input->post('activeStatus'),
				'studentTimestamp' => $this->input->post('studentTimestamp'),
				'year' => date('Y'),
				'studentMiddleName' => $this->input->post('studentMiddleName'),
				'aggrement' => $this->input->post('aggrement'),
            );
            
            $student_id = $this->Student_model->add_student($params);
            redirect('student/index');
        }
        else
        {            
            //$data['_view'] = 'student/add';
            $this->load->view('header_footer/header_admin');
            $this->load->view('student/add');
            $this->load->view('header_footer/footer_admin');
        }
    }  

	public function register(){

		$this->load->library('form_validation');
		$this->form_validation->set_rules('studentName','StudentName','required');
		$this->form_validation->set_rules('studentLastName','StudentLastName','required');
		$this->form_validation->set_rules('studentDOB','StudentDOB','required');
		$this->form_validation->set_rules('studentCountry','StudentCountry','required');
		$this->form_validation->set_rules('gender','Gender','required');
		$this->form_validation->set_rules('studentEmail','StudentEmail','required');
		$this->form_validation->set_rules('studentPassword','StudentPassword','required');
		$this->form_validation->set_rules('studentPhone','StudentPhone','required');
		$this->form_validation->set_rules('studentAddress','StudentAddress','required');
		$this->form_validation->set_rules('passport','Passport','required');
		
		if($this->form_validation->run())
		{
			$config['upload_path']= './uploads/campus/';
            $config['allowed_types']= 'png|jpg|jpeg';
            $new_file=uniqid('campus');
            $config['file_name'] = $new_file.".jpg";

            $this->load->library('upload', $config);


            if ( ! $this->upload->do_upload('proofOfPayment'))
            {
                $error = array('error' => $this->upload->display_errors());
                $this->session->set_flashdata(['error'=>$error['error']]);
                redirect($_SERVER['HTTP_REFERER']); 
            }
			else{

				$number = uniqid(TRUE);
				$studentNumber = uniqid(TRUE);

				$params = array(
					'studentName' => $this->input->post('studentName'),
					'studentLastName' => $this->input->post('studentLastName'),
					'studentDOB' => $this->input->post('studentDOB'),
					'studentCountry' => $this->input->post('studentCountry'),
					'studentNumber' => $studentNumber,
					'number' => $number,
					'identityNo' =>uniqid(TRUE),
					'gender' => $this->input->post('gender'),
					'studentEmail' => $this->input->post('studentEmail'),
					'studentPassword' => $this->input->post('studentPassword'),
					'studentPhone' => $this->input->post('studentPhone'),
					'studentAddress' => $this->input->post('studentAddress'),
					'passport' => $this->input->post('passport'),
					'disability' => '0',
					'physicalHealth' =>'0',
					'intellectual' => '0',
					'learning' => '0',
					'mental' => '0',
					'vision' => '0',
					'medical' => '0',
					'other' => '0',
					'proofOfPayment' => '/uploads/campus/'. $config['file_name'],
					'certificates' => $this->input->post('certificates'),
					'otp' => '0',
					'activeStatus' => '0',
					'studentTimestamp' => $this->input->post('studentTimestamp'),
					'year' => date('Y'),
					'studentMiddleName' => $this->input->post('studentMiddleName'),
					'aggrement' => $this->input->post('aggrement'),
				);

				$student_id = $this->Student_model->add_student($params);
				$data = $this->Student_model->get_student_where_number($studentNumber);

				foreach($data as $user){
					
					$params = array(
						'courseID' => $this->input->post('course'),
						'studentID' => $user[0]['studentID'],
						'timestamp' => date('Y-m-d'),
					);
					$assignedcourse_id = $this->Assignedcourse_model->add_assignedcourse($params);
					break;
				}
				
		
				$name = $this->input->post('studentName');
				
				$message = "
				Hi $name
				Student Number: $studentNumber
				
				Your registration at Bytesize College for Certificate in Computing and Information System in Gaborone was successful.
				
				Your student account on Learning Management System (LMS) will be activated after we have received your payment and you will be soon informed on the commencement of your course.
				
				Kindly pay your registration fee. If you have already done so, please ignore.   
				
				Byte Size College Bank Details
				
				BANK NAME: FIRST NATIONAL BANK
				
				ACCOUNT NAME: IT SOLUTIONS & TRAINING (PTY) LTD
				
				ACCOUNT NUMBER: 62067622772
				
				SWIFT CODE: FIRNBWGX
				
				BRANCH CODE: 281467
				
				BRANCH: MAIN BRANCH
				
				YOUR REFERENCE: $studentNumber
				
				BANK NAME: ABSA BANK BOTSWANA LIMITED
				
				ACCOUNT NAME: BYTE SIZE COLLEGE
				
				ACCOUNT NUMBER: 1305725
				
				SWIFT CODE: BARCBWGX
				
				BRANCH CODE: 290167
				
				BRANCH: MALL BRANCH
				
				YOUR REFERENCE: $studentNumber
				
				Please send the proof of payment to the following emails dikabelo@bytesizecollege.org, amantle@bytesizecollege.org, gaborone@bytesizecollege.org, palapye@bytesizecollege.org, letlhakane@bytesizecollege.org
				Regards,
				
				Byte Size College
				
				Tel: +267 3903324 / +267 3907072
				
				Fax: +267 3950048
				
				Mobile: +267 71557489 / +267 74166435
				
				Motto Ã¢ÂÂA College with a Difference";
				
				if(mail($this->input->post('studentEmail'), 'Your registration was successful', $message)){
	
					$this->session->set_flashdata(['success'=>TRUE]);
					redirect($_SERVER['HTTP_REFERER']);
				}
				else{
	
					$this->session->set_flashdata(['errorEmail'=>TRUE]);
					redirect($_SERVER['HTTP_REFERER']);

				}
			}
            
			
        }
        else
        {   $this->session->set_flashdata(['error'=>'formular is incorrect! make to enter any thing please!']);
            redirect($_SERVER['HTTP_REFERER']);
        }
	}

    /*
     * Editing a student
     */
    public function edit($studentID){
        // check if the student exists before trying to edit it
        $data['student'] = $this->Student_model->get_student($studentID);
        
        if(isset($data['student']['studentID']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('studentID','StudentID','required');
			$this->form_validation->set_rules('studentName','StudentName','required');
			$this->form_validation->set_rules('studentLastName','StudentLastName','required');
			$this->form_validation->set_rules('studentDOB','StudentDOB','required');
			$this->form_validation->set_rules('studentCountry','StudentCountry','required');
			$this->form_validation->set_rules('studentNumber','StudentNumber','required');
			$this->form_validation->set_rules('number','Number','required');
			$this->form_validation->set_rules('identityNo','IdentityNo','required');
			$this->form_validation->set_rules('gender','Gender','required');
			$this->form_validation->set_rules('studentEmail','StudentEmail','required');
			$this->form_validation->set_rules('studentPassword','StudentPassword','required');
			$this->form_validation->set_rules('studentPhone','StudentPhone','required');
			$this->form_validation->set_rules('studentHomeNo','StudentHomeNo','required');
			$this->form_validation->set_rules('studentImage','StudentImage','required');
			$this->form_validation->set_rules('studentAddress','StudentAddress','required');
			$this->form_validation->set_rules('passport','Passport','required');
			$this->form_validation->set_rules('disability','Disability','required');
			$this->form_validation->set_rules('hearing','Hearing','required');
			$this->form_validation->set_rules('physicalHealth','PhysicalHealth','required');
			$this->form_validation->set_rules('intellectual','Intellectual','required');
			$this->form_validation->set_rules('learning','Learning','required');
			$this->form_validation->set_rules('mental','Mental','required');
			$this->form_validation->set_rules('vision','Vision','required');
			$this->form_validation->set_rules('medical','Medical','required');
			$this->form_validation->set_rules('other','Other','required');
			$this->form_validation->set_rules('passportDOC','PassportDOC','required');
			$this->form_validation->set_rules('proofOfPayment','ProofOfPayment','required');
			$this->form_validation->set_rules('certificates','Certificates','required');
			$this->form_validation->set_rules('otp','Otp','required');
			$this->form_validation->set_rules('activeStatus','ActiveStatus','required');
			$this->form_validation->set_rules('studentTimestamp','StudentTimestamp','required');
			$this->form_validation->set_rules('year','Year','required');
			$this->form_validation->set_rules('studentMiddleName','StudentMiddleName','required');
			$this->form_validation->set_rules('aggrement','Aggrement','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'studentName' => $this->input->post('studentName'),
					'studentLastName' => $this->input->post('studentLastName'),
					'studentDOB' => $this->input->post('studentDOB'),
					'studentCountry' => $this->input->post('studentCountry'),
					'studentNumber' => $this->input->post('studentNumber'),
					'number' => $this->input->post('number'),
					'identityNo' => $this->input->post('identityNo'),
					'gender' => $this->input->post('gender'),
					'studentEmail' => $this->input->post('studentEmail'),
					'studentPassword' => $this->input->post('studentPassword'),
					'studentPhone' => $this->input->post('studentPhone'),
					'studentHomeNo' => $this->input->post('studentHomeNo'),
					'studentImage' => $this->input->post('studentImage'),
					'studentAddress' => $this->input->post('studentAddress'),
					'passport' => $this->input->post('passport'),
					'disability' => $this->input->post('disability'),
					'hearing' => $this->input->post('hearing'),
					'physicalHealth' => $this->input->post('physicalHealth'),
					'intellectual' => $this->input->post('intellectual'),
					'learning' => $this->input->post('learning'),
					'mental' => $this->input->post('mental'),
					'vision' => $this->input->post('vision'),
					'medical' => $this->input->post('medical'),
					'other' => $this->input->post('other'),
					'passportDOC' => $this->input->post('passportDOC'),
					'proofOfPayment' => $this->input->post('proofOfPayment'),
					'certificates' => $this->input->post('certificates'),
					'otp' => $this->input->post('otp'),
					'activeStatus' => $this->input->post('activeStatus'),
					'studentTimestamp' => $this->input->post('studentTimestamp'),
					'year' => $this->input->post('year'),
					'studentMiddleName' => $this->input->post('studentMiddleName'),
					'aggrement' => $this->input->post('aggrement'),
                );

                $this->Student_model->update_student($studentID,$params);            
                redirect('student/index');
            }
            else {
                $this->load->view('header_footer/header_admin');
                $this->load->view('student/edit', $data);
                $this->load-view('header_footer/footer_admin');
            }
        }
        else
            show_error('The student you are trying to edit does not exist.');
    } 

    /*
     * Deleting student
     */
    public function remove($studentID)
    {
        $student = $this->Student_model->get_student($studentID);

        // check if the student exists before trying to delete it
        if(isset($student['studentID']))
        {
            $this->Student_model->delete_student($studentID);
            redirect('student/index');
        }
        else
            show_error('The student you are trying to delete does not exist.');
    }

    public function student_profile($studentID){

        $data['students'] = $this->Student_model->get_student($studentID);

        $this->load->view('header_footer/header_admin');
        $this->load->view('student/student_profile',$data);
        $this->load->view('header_footer/footer_admin');
    }

    public function student_profile_dashboard() {

        $studentID = $this->session->get_userdata();
        $data['docs'] = '/uploads/forms/RegistrationForm.pdf';
        $data['student'] = $this->Student_model->get_student($studentID['id_user']);

        $this->load->view('header_footer/header_admin');
        $this->load->view('header_footer/students/student_profile', $data);
        $this->load->view('header_footer/footer_admin');


    }

    public function download() {
        $this->load->helper('download');
        $fileinfo = $this->Student_model->download($this->session->id_user);
        $file = site_url('/uploads/forms/RegistrationForm.pdf');
        force_download($file, NULL);
    }

    public function edit_profile_dashboard(){
        // check if the student exists before trying to edit it
        $studentID = $this->Student_model->get_student($this->session->id_user);

        if(isset($studentID[0]['studentID'])) {

            $data['students'] = $studentID;
            $this->load->library('form_validation');

            $this->form_validation->set_rules('studentName','StudentName','required');
            $this->form_validation->set_rules('studentLastName','StudentLastName','required');
            $this->form_validation->set_rules('studentDOB','StudentDOB','required');
            $this->form_validation->set_rules('studentCountry','StudentCountry','required');
            $this->form_validation->set_rules('gender','Gender','required');
            $this->form_validation->set_rules('studentEmail','StudentEmail','required');
            $this->form_validation->set_rules('studentPassword','StudentPassword','required');
            $this->form_validation->set_rules('studentPhone','StudentPhone','required');
            $this->form_validation->set_rules('studentAddress','StudentAddress','required');
            $this->form_validation->set_rules('passportDOC','PassportDOC');

            if($this->form_validation->run()) {

                $config['upload_path']= './uploads/campus/';
                $config['allowed_types']= 'jpg|png|jpeg';
                $new_file=uniqid('campus');
                $config['file_name'] = $new_file.".jpg";

                $this->load->library('upload', $config);

                if (!$this->upload->do_upload('passportDOC')) {
                    $error = array('error' => $this->upload->display_errors());
                    $this->session->set_flashdata(['error'=>$error['error']]);
                    redirect($_SERVER['HTTP_REFERER']);
                }else {
                    $params = [
                        'studentID' => $this->session->id_user,
                        'studentName' => $this->input->post('studentName'),
                        'studentLastName' => $this->input->post('studentLastName'),
                        'studentDOB' => $this->input->post('studentDOB'),
                        'studentCountry' => $this->input->post('studentCountry'),
                        'gender' => $this->input->post('gender'),
                        'studentEmail' => $this->input->post('studentEmail'),
                        'studentPassword' => $this->input->post('studentPassword'),
                        'studentPhone' => $this->input->post('studentPhone'),
                        'studentAddress' => $this->input->post('studentAddress'),
                        'passportDOC'=>'/uploads/campus/'. $config['file_name']
                    ];

                    $this->session->set_flashdata(['success'=>true]);
                    $this->Student_model->update_student($this->session->id_user, $params);
                    redirect($_SERVER['HTTP_REFERER']);
                }
            }else {
                $this->load->view('header_footer/header_admin');
                $this->load->view('header_footer/students/edit_profile', $data);
                $this->load->view('header_footer/footer_admin');
            }
        }
        else
            show_error('The student you are trying to edit does not exist.');
    }


	public function active_student($id){

		if($this->Student_model->actived_student($id)){

			$this->session->set_flashdata(['success'=>true]);
			redirect($_SERVER['HTTP_REFERER']);
		}
		else{
			$this->session->set_flashdata(['error'=>true]);
			redirect($_SERVER['HTTP_REFERER']);
		}
	}
}
