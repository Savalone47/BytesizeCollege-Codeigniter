<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Course extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model(['Course_model','Assignedcourse_model','Department_model', 'Student_model','Module_model','Notification_model']);
    } 

    /*
     * Listing of courses
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('course/index?');
        $config['total_rows'] = $this->Course_model->get_all_courses_count();
        $this->pagination->initialize($config);

        $data['courses'] = $this->Course_model->get_all_courses();

        $this->load->view('header_footer/header_admin');
        $this->load->view('course/index',$data);
        $this->load->view('header_footer/footer_admin');
    }


    function students($id){
        $data['students'] = $this->Assignedcourse_model->get_students($id);
        $data['modules'] = $this->Module_model->get_all_module_course($id);

        $this->load->view('header_footer/header_admin');
        $this->load->view('course/student_course',$data);
        $this->load->view('header_footer/footer_admin');
    }

    /*
     * Adding a new course
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('courseName','CourseName','required|max_length[40]');
		$this->form_validation->set_rules('courseType','CourseType','required|max_length[50]');
		$this->form_validation->set_rules('courseDepartment','CourseDepartment','required|max_length[250]');
		$this->form_validation->set_rules('courseManager','CourseManager','required|max_length[10]');
		$this->form_validation->set_rules('courseCode','CourseCode','required|max_length[17]');
		$this->form_validation->set_rules('courseDuration','CourseDuration','required');
		$this->form_validation->set_rules('courseTimeline','CourseTimeline','required|max_length[50]');
		$this->form_validation->set_rules('courseLevel','CourseLevel','required|max_length[50]');
		$this->form_validation->set_rules('courseCredits','CourseCredits','required|max_length[11]');
		$this->form_validation->set_rules('coursePrice','CoursePrice','required|max_length[11]');
		$this->form_validation->set_rules('courseIntake','CourseIntake','required|max_length[10]');
		$this->form_validation->set_rules('courseDelivery','CourseDelivery','required|max_length[90]');
		$this->form_validation->set_rules('courseStartDate','CourseStartDate','required|max_length[250]');
		$this->form_validation->set_rules('courseOverview','CourseOverview','required');
		
		if($this->form_validation->run())     
        {   

            $config['upload_path']= './uploads/campus/';
            $config['allowed_types']= 'jpg|png|jpeg';
            $new_file=uniqid('campus');
            $config['file_name'] = $new_file.".jpg";

            $this->load->library('upload', $config);


            if ( ! $this->upload->do_upload('curriculum'))
            {
                $error = array('error' => $this->upload->display_errors());
                $this->session->set_flashdata(['error'=>$error['error']]);
                redirect($_SERVER['HTTP_REFERER']); 
            }
            else{
                
                $params = array(
                    'courseName' => $this->input->post('courseName'),
                    'courseType' => $this->input->post('courseType'),
                    'courseDepartment' => $this->input->post('courseDepartment'),
                    'courseManager' => $this->input->post('courseManager'),
                    'courseCode' => $this->input->post('courseCode'),
                    'courseDuration' => $this->input->post('courseDuration'),
                    'courseTimeline' => $this->input->post('courseTimeline'),
                    'courseLevel' => $this->input->post('courseLevel'),
                    'courseCredits' => $this->input->post('courseCredits'),
                    'coursePrice' => $this->input->post('coursePrice'),
                    'courseIntake' => $this->input->post('courseIntake'),
                    'courseDelivery' => $this->input->post('courseDelivery'),
                    'courseStartDate' => $this->input->post('courseStartDate'),
                    'time_stamp' => date('M-D-Y'),
                    'courseOverview' => $this->input->post('courseOverview'),
                    'curriculum' =>'/uploads/campus/'. $config['file_name']
                );
                
                $course_id = $this->Course_model->add_course($params);
                redirect('course/index');
            }
            
        
        }
        else
        {            
            $data['departments'] = $this->Department_model->get_all_department();
            $this->load->view('header_footer/header_admin');
            $this->load->view('course/add',$data);
            $this->load->view('header_footer/footer_admin');
        }
    }  

    /*
     * Editing a course
     */
    function edit($coursesID)
    {   
        // check if the course exists before trying to edit it
        $data['course'] = $this->Course_model->get_courses($coursesID);
        
        if(isset($data['course']['coursesID'])) {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('courseName','CourseName','required|max_length[40]');
			$this->form_validation->set_rules('courseType','CourseType','required|max_length[50]');
			$this->form_validation->set_rules('courseDepartment','CourseDepartment','required|max_length[250]');
			$this->form_validation->set_rules('curriculum','Curriculum','required|max_length[250]');
			$this->form_validation->set_rules('courseManager','CourseManager','required|max_length[10]');
			$this->form_validation->set_rules('courseCode','CourseCode','required|max_length[17]');
			$this->form_validation->set_rules('courseDuration','CourseDuration','required');
			$this->form_validation->set_rules('courseTimeline','CourseTimeline','required|max_length[50]');
			$this->form_validation->set_rules('courseLevel','CourseLevel','required|max_length[50]');
			$this->form_validation->set_rules('courseCredits','CourseCredits','required|max_length[11]');
			$this->form_validation->set_rules('coursePrice','CoursePrice','required|max_length[11]');
			$this->form_validation->set_rules('courseIntake','CourseIntake','required|max_length[10]');
			$this->form_validation->set_rules('courseDelivery','CourseDelivery','required|max_length[90]');
			$this->form_validation->set_rules('courseStartDate','CourseStartDate','required|max_length[250]');
			$this->form_validation->set_rules('time_stamp','Time Stamp','required');
			$this->form_validation->set_rules('courseOverview','CourseOverview','required');
		
			if($this->form_validation->run()) {
                $params = array(
                    'courseName' => $this->input->post('courseName'),
                    'courseType' => $this->input->post('courseType'),
                    'courseDepartment' => $this->input->post('courseDepartment'),
                    'curriculum' => $this->input->post('curriculum'),
                    'courseManager' => $this->input->post('courseManager'),
                    'courseCode' => $this->input->post('courseCode'),
                    'courseDuration' => $this->input->post('courseDuration'),
                    'courseTimeline' => $this->input->post('courseTimeline'),
                    'courseLevel' => $this->input->post('courseLevel'),
                    'courseCredits' => $this->input->post('courseCredits'),
                    'coursePrice' => $this->input->post('coursePrice'),
                    'courseIntake' => $this->input->post('courseIntake'),
                    'courseDelivery' => $this->input->post('courseDelivery'),
                    'courseStartDate' => $this->input->post('courseStartDate'),
                    'time_stamp' => $this->input->post('time_stamp'),
                    'courseOverview' => $this->input->post('courseOverview'),
                    'picture'=>'/uploads/campus/'. $config['file_name']
                );

                $this->Course_model->update_course($coursesID,$params);
                redirect('course/index');

                $config['upload_path']= './uploads/campus/';
                $config['allowed_types']= 'jpg|png|jpeg';
                $new_file=uniqid('campus');
                $config['file_name'] = $new_file.".jpg";

                $this->load->library('upload', $config);

                if (!$this->upload->do_upload('picture')) {
                    $error = array('error' => $this->upload->display_errors());
                    $this->session->set_flashdata(['error'=>$error['error']]);
                    redirect($_SERVER['HTTP_REFERER']);
                }else{
                    show_error('Picture course you are trying to edit does not exist.');
                }
                
            }else {
                $this->load->view('header_footer/header_admin');
                $this->load->view('course/edit',$data);
                $this->load->view('header_footer/footer_admin');
            }
        }
        else
            show_error('The course you are trying to edit does not exist.');
    } 

    /*
     * Deleting course
     */
    function remove($coursesID)
    {
        $course = $this->Course_model->get_courses($coursesID);

        // check if the course exists before trying to delete it
        if(isset($course['coursesID']))
        {
            $this->Course_model->delete_course($coursesID);
            redirect('course/index');
        }
        else
            show_error('The course you are trying to delete does not exist.');
    }

    function getCourses($idDepartment){
        $data['courses'] = $this->Course_model->get_course_of_departement($idDepartment);

        $this->load->view('header_footer/header');
        $this->load->view('course/courses',$data);
        $this->load->view('header_footer/footer');
    }

    function getCourseDetail($idCourse){
        $data['courses'] = $this->Course_model->get_course($idCourse);
        $data['modules'] =  $this->Module_model->get_module_course($idCourse);

        $this->load->view('header_footer/header');
        $this->load->view('course/detail',$data);
        $this->load->view('header_footer/footer');

    }
    function report(){
        $data['all_students_count'] = $this->Student_model->get_all_students_count();
        $data['course_per'] = $this->Course_model-> get_all_courses_count();
        $data['branch_per'] = $this->Department_model->get_all_department_count();

        $this->load->view('header_footer/header_admin');
        $this->load->view('course/report',$data);
        $this->load->view('header_footer/footer_admin');
    }

    function allStudents_printable(){
        $data['allStudent'] = $this->Student_model->get_all_students();

        $this->load->view('header_footer/header_admin');
        $this->load->view('course/allStudents_printable', $data);
        $this->load->view('header_footer/footer_admin');
    }

    function student_per_course(){
        $this->load->view('header_footer/header_admin');
        $this->load->view('course/student_per_course');
        $this->load->view('header_footer/footer_admin');
    }

    function student_per_branch(){
        $this->load->view('header_footer/header_admin');
        $this->load->view('course/student_per_branch');
        $this->load->view('header_footer/footer_admin');
    }

    function staff_login_report(){
        $this->load->view("header_footer/header_admin");
        $this->load->view('course/staff_login_report');
        $this->load->view('header_footer/footer_admin');
    }

    function staff_login_student(){
        $this->load->view("header_footer/header_admin");
        $this->load->view('course/staff_login_student');
        $this->load->view('header_footer/footer_admin');
    }
}
