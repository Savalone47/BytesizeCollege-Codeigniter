<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Event extends CI_Controller{
    function __construct(){
        parent::__construct();
        $this->load->model(['Event_model','Notification_model']);
    } 

    /*
     * Listing of events
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('event/index?');
        $config['total_rows'] = $this->Event_model->get_all_events_count();
        $this->pagination->initialize($config);

        $data['events'] = $this->Event_model->get_all_events($params);
        $this->load->view('header_footer/header_admin');
        $this->load->view('event/index',$data);
        $this->load->view('header_footer/footer_admin');
    }

    /*
     * Adding a new event
     */
    function add()
    {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('eventTitle','EventTitle','required');
        $this->form_validation->set_rules('eventDate','EventDate','required');
        $this->form_validation->set_rules('eventstatTime','EventstatTime','required');
        $this->form_validation->set_rules('eventType', 'Event Type', 'required');
        $this->form_validation->set_rules('eventendTime','EventendTime','required');
        $this->form_validation->set_rules('eventLocation','EventLocation','required');
        $this->form_validation->set_rules('eventDescription','EventDescription','required');
        //$this->form_validation->set_rules('eventImage','EventImage');
        $this->form_validation->set_rules('eventStatus','EventStatus','required');
        $this->form_validation->set_rules('eventTimestamp','EventTimestamp','required');

        if($this->form_validation->run())
        {
            $params = array(
                'eventType' => $this->input->post('eventType'),
                'eventTitle' => $this->input->post('eventTitle'),
                'eventDate' => $this->input->post('eventDate'),
                'eventstatTime' => $this->input->post('eventstatTime'),
                'eventendTime' => $this->input->post('eventendTime'),
                'eventLocation' => $this->input->post('eventLocation'),
                'eventDescription' => $this->input->post('eventDescription'),
                //'eventImage' => $this->input->post('eventImage'),
                'eventStatus' => $this->input->post('eventStatus'),
                'eventTimestamp' => $this->input->post('eventTimestamp'),
            );

            $event_id = $this->Event_model->add_event($params);
            redirect('event/index');
        }
        else {
            $this->load->view('header_footer/header_admin');
            $this->load->view('event/add');
            $this->load->view('header_footer/footer_admin');
        }
    }
    /*
     * Editing a event
     */
    function edit($eventID)
    {   
        // check if the event exists before trying to edit it
        $data['event'] = $this->Event_model->get_event($eventID);
        
        if(isset($data['event']['eventID']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('eventTitle','EventTitle','required');
			$this->form_validation->set_rules('eventDate','EventDate','required');
			$this->form_validation->set_rules('eventstatTime','EventstatTime','required');
			$this->form_validation->set_rules('eventendTime','EventendTime','required');
			$this->form_validation->set_rules('eventLocation','EventLocation','required');
			$this->form_validation->set_rules('eventDescription','EventDescription','required');
			//$this->form_validation->set_rules('eventImage','EventImage','required');
			$this->form_validation->set_rules('eventStatus','EventStatus','required');
			$this->form_validation->set_rules('eventTimestamp','EventTimestamp','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'eventType' => $this->input->post('eventType'),
					'eventTitle' => $this->input->post('eventTitle'),
					'eventDate' => $this->input->post('eventDate'),
					'eventstatTime' => $this->input->post('eventstatTime'),
					'eventendTime' => $this->input->post('eventendTime'),
					'eventLocation' => $this->input->post('eventLocation'),
					'eventDescription' => $this->input->post('eventDescription'),
					//'eventImage' => $this->input->post('eventImage'),
					'eventStatus' => $this->input->post('eventStatus'),
					'eventTimestamp' => $this->input->post('eventTimestamp'),
                );

                $this->Event_model->update_event($eventID,$params);            
                redirect('event/index');
            }
            else {
                $this->load->view('header_footer/header_admin');
                $this->load->view('event/edit',$data);
                $this->load->view('header_footer/footer_admin');
            }
        }
        else
            show_error('The event you are trying to edit does not exist.');
    } 

    /*
     * Deleting event
     */
    function remove($eventID)
    {
        $event = $this->Event_model->get_event($eventID);

        // check if the event exists before trying to delete it
        if(isset($event['eventID']))
        {
            $this->Event_model->delete_event($eventID);
            redirect('event/index');
        }
        else
            show_error('The event you are trying to delete does not exist.');
    }

    public function viewEvent(){
        $data['Events'] = $this->Event_model->get_all_events();

        $this->load->view('header_footer/header');
        $this->load->view('event/event',$data);
        $this->load->view('header_footer/footer');
    }
}
